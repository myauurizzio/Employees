Особенности реализации приложения Empoyees

После получения Техническое задание было внесено в специально созданный проект Azure DevOps.
Задание разделено по пунктам на Work items.
К каждому Work Item привязано реализующее его изменение и комментарии по его особенностям.

Проект написан в Microsoft Visual Studio 2017
В качестве сервера приложений использовано облако Azure, где опубликовано WebApp по адресу https://ru-memorials-dev.azurewebsites.net/ 

Серверная часть (бэкенд) написана на .NET Core (Razor+MVC).
Фронтенд - HTML5, CSS (Bootstrap 4), Javascript.
Взаимодействие клиентской и серверной частей - посредством POST запросов по протоколу HTTPS в авторизованных сеансах.

Навигация по страницам и действиям реализована подписанными кнопками и иконками (карандаш - редактирование записи, красный крест - удаление).
Возврат на стартовую страницу - клик по названию программы Employees в левой части верхней навигационной панели.

Проверка пользователей (Аутентификация) осуществляется штатными средствами Azure AD.
Авторизация пользователей организована при помощи встроенных методов CheckUser и CheckAdmin (хардкод по UPN).
Остальным аутентифицированным пользователям, включая имеющих легальные аккаунты организации (в том же каталоге AAD) либо LiveID, в доступе отказывается.
В системе есть две роли - Администратор и Пользователь.
Администратору доступна возможность модификации БД.

Один контроллер MVC (EmpController).
Утилиты работы с БД и дополнительные служебные методы вынесены в отдельный репозиторий (EmpRepository).

БД - файловая, текстовая в формате JSON.
Транзакционность и конкурентность не реализовывались.
Любая фиксация изменений включает в себя перенумерацию строк (поле ID), сохранение всех строк в файл, чтение всех строк из файла.
Уникальность при удалении проверяется по Guid.
Сериализация и Десериализация JSON при помощи пакета Newtonsoft.Json.

Есть возможность восстановления БД в исходное (стартовое) состояние специальной кнопкой или автоматически (при удалении всех записей).
При этом БД заполняется из словарей псевдослучайными данными (всегда одними и теми же).

Валидация пользовательского ввода сделана на клиентской стороне при помощи регулярных выражений (Javascript) и Bootstrap.
Серверная валидация не реализовывалась.

Диаграммы построены на компонентах HighCharts  (Javascript библиотека).
Данные JSON-массива формируются на серверной стороне, а затем вставляются в JS функцию при помощи Html.Raw.
Компоненты Highsoft HighCharts лицензированы для этого проекта (Personal / Student Use)
